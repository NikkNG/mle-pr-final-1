version: '3.8'

services:
  # API сервис
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - LOG_LEVEL=INFO
      - MONITORING_ENABLED=true
      - RETRAINING_ENABLED=true
    depends_on:
      - mlflow
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    networks:
      - recommender-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow сервер
  mlflow:
    build: .
    command: >
      sh -c "mlflow server 
             --host 0.0.0.0 
             --port 5000 
             --backend-store-uri sqlite:///mlflow.db 
             --default-artifact-root /app/mlruns
             --serve-artifacts"
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/app/mlruns
    volumes:
      - ./mlruns:/app/mlruns
      - ./mlflow.db:/app/mlflow.db
    networks:
      - recommender-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - recommender-network
    restart: unless-stopped

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - recommender-network
    restart: unless-stopped



  # PostgreSQL для хранения данных
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=recommender
      - POSTGRES_USER=recommender_user
      - POSTGRES_PASSWORD=recommender_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - recommender-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U recommender_user -d recommender"]
      interval: 30s
      timeout: 10s
      retries: 3



networks:
  recommender-network:
    driver: bridge

volumes:
  grafana-storage:
  postgres-data: 